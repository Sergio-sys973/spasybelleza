{"version":3,"sources":["gulpfile.js"],"names":["require","src","dest","watch","series","parallel","sass","autoprefixer","postcss","sourcemaps","cssnano","concat","terser","rename","imagemin","notify","cache","clean","webp","paths","scss","js","imagenes","css","pipe","init","write","javascript","optimizationLevel","message","versionWebp","watchArchivos","exports","build"],"mappings":"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","sourcesContent":["const { src, dest, watch , series, parallel } = require('gulp');\nconst sass = require('gulp-sass')(require('sass'));\nconst autoprefixer = require('autoprefixer');\nconst postcss    = require('gulp-postcss')\nconst sourcemaps = require('gulp-sourcemaps')\nconst cssnano = require('cssnano');\nconst concat = require('gulp-concat');\nconst terser = require('gulp-terser-js');\nconst rename = require('gulp-rename');\nconst imagemin = require('gulp-imagemin'); // Minificar imagenes \nconst notify = require('gulp-notify');\nconst cache = require('gulp-cache');\nconst clean = require('gulp-clean');\nconst webp = require('gulp-webp');\n\nconst paths = {\n    scss: 'src/scss/**/*.scss',\n    js: 'src/js/**/*.js',\n    imagenes: 'src/img/**/*'\n}\n\n// css es una funci√≥n que se puede llamar automaticamente\nfunction css() {\n    return src(paths.scss)\n        .pipe(sourcemaps.init())\n        .pipe(sass())\n        .pipe(postcss([autoprefixer(), cssnano()]))\n        // .pipe(postcss([autoprefixer()]))\n        .pipe(sourcemaps.write('.'))\n        .pipe( dest('public/build/css') );\n}\n\n\nfunction javascript() {\n    return src(paths.js)\n      .pipe(terser())\n      .pipe(sourcemaps.write('.'))\n      .pipe(dest('public/build/js'));\n}\n\nfunction imagenes() {\n    return src(paths.imagenes)\n        .pipe(cache(imagemin({ optimizationLevel: 3})))\n        .pipe(dest('public/build/img'))\n        .pipe(notify({ message: 'Imagen Completada'}));\n}\n\nfunction versionWebp() {\n    return src(paths.imagenes)\n        .pipe( webp() )\n        .pipe(dest('public/build/img'))\n        .pipe(notify({ message: 'Imagen Completada'}));\n}\n\n\nfunction watchArchivos() {\n    watch( paths.scss, css );\n    watch( paths.js, javascript );\n    watch( paths.imagenes, imagenes );\n    watch( paths.imagenes, versionWebp );\n}\n  \nexports.css = css;\nexports.watchArchivos = watchArchivos;\nexports.default = parallel(css, javascript,  imagenes, versionWebp,  watchArchivos ); \nexports.build = parallel(css, javascript,  imagenes, versionWebp); "],"file":"gulpfile.dev.js"}