{"version":3,"sources":["gulpfile.js"],"names":["require","src","dest","watch","series","parallel","sass","autoprefixer","rename","notify","clean","postcss","sourcemaps","scss","cssnano","imagenes","css","pipe","init","imagemin","write","javascript","webp","js","terser","paths","cache","optimizationLevel","message","versionWebp","exports","watchArchivos","build"],"mappings":"0BAAgDA,QAAQ,QAAhDC,aAAAA,IAAKC,cAAAA,KAAMC,eAAAA,MAAQC,gBAAAA,OAAQC,kBAAAA,SAC7BC,KAAON,QAAQ,YAARA,CAAqBA,QAAQ,SACpCO,aAF0CP,QAAO,gBAA/CC,QAAAA,QAGmB,gBAHdC,WAIMF,QAAQ,mBAJRG,QAKHH,QALGG,WAAQC,OAMZJ,QANYI,eAAQC,OAOpBL,QAAQ,kBACjBQ,OAASR,QAAQ,eAPjBM,SAAON,QAAQ,iBASfS,OAAST,QAAQ,eARjBO,MAAAA,QAAeP,cAUfU,MAAQV,QAAQ,cAThBW,KAAOX,QAAa,aACpBY,MAAU,CAYZC,KAAM,qBAXJC,GAAAA,iBAaFC,SAAU,gBAId,SAASC,MAdHR,OAAMP,IAAGD,MAAQa,MAgBdI,KAAKL,WAAWM,QAfnBC,KAAQb,QAiBLW,KAAKN,QAAQ,CAACJ,eAAgBO,aAhBjCL,KAAST,WAAQoB,MAAA,MAmBdH,KAAMf,KAAK,qBAIpB,SAASmB,aApBHC,OAAOtB,IAAAA,MAAQuB,IAsBdN,KAAKO,UApBNC,KAAQb,WAAAQ,MAAA,MACNH,KAAEf,KAAA,oBADI,SAMda,WAoBI,OAAOd,IAAIwB,MAAMV,UAnBZC,KAATU,MAAeP,SAAA,CAAAQ,kBAAA,MACJ1B,KAAIwB,KAAMZ,qBAKPD,KAAAA,OAAWQ,CAAAA,QAChBH,uBAIT,SAASI,cACL,OAAOpB,IAAIwB,MAADV,UAIbE,KAAAK,QAYQL,KAAKf,KAAK,qBAVVa,KAAAA,OAAW,CAAAa,QAAA,uBAIGA,SAAAA,gBAHZzB,MAAPsB,MAAAZ,KAAAG,KAIHb,MAAAsB,MAAAF,GAAAF,YAaGlB,MAAOsB,MAAMV,SAAUA,UAX3BZ,MAAS0B,MAAAA,SAAcA,aAIFC,QAHjBd,IAAAA,IAIHc,QAAAC,cAAAA,cAYDD,QAAO,QAAWzB,SAASW,IAAKK,WAAaN,SAAUc,YAAcE,eATrED,QAAAE,MAASD,SAAgBf,IAAAK,WAAAN,SAAAc","file":"gulpfile.min.js","sourcesContent":["const { src, dest, watch , series, parallel } = require('gulp');\nconst sass = require('gulp-sass')(require('sass'));\nconst autoprefixer = require('autoprefixer');\nconst postcss    = require('gulp-postcss')\nconst sourcemaps = require('gulp-sourcemaps')\nconst cssnano = require('cssnano');\nconst concat = require('gulp-concat');\nconst terser = require('gulp-terser-js');\nconst rename = require('gulp-rename');\nconst imagemin = require('gulp-imagemin'); // Minificar imagenes \nconst notify = require('gulp-notify');\nconst cache = require('gulp-cache');\nconst clean = require('gulp-clean');\nconst webp = require('gulp-webp');\n\nconst paths = {\n    scss: 'src/scss/**/*.scss',\n    js: 'src/js/**/*.js',\n    imagenes: 'src/img/**/*'\n}\n\n// css es una funci√≥n que se puede llamar automaticamente\nfunction css() {\n    return src(paths.scss)\n        .pipe(sourcemaps.init())\n        .pipe(sass())\n        .pipe(postcss([autoprefixer(), cssnano()]))\n        // .pipe(postcss([autoprefixer()]))\n        .pipe(sourcemaps.write('.'))\n        .pipe( dest('public/build/css') );\n}\n\n\nfunction javascript() {\n    return src(paths.js)\n      .pipe(terser())\n      .pipe(sourcemaps.write('.'))\n      .pipe(dest('public/build/js'));\n}\n\nfunction imagenes() {\n    return src(paths.imagenes)\n        .pipe(cache(imagemin({ optimizationLevel: 3})))\n        .pipe(dest('public/build/img'))\n        .pipe(notify({ message: 'Imagen Completada'}));\n}\n\nfunction versionWebp() {\n    return src(paths.imagenes)\n        .pipe( webp() )\n        .pipe(dest('public/build/img'))\n        .pipe(notify({ message: 'Imagen Completada'}));\n}\n\n\nfunction watchArchivos() {\n    watch( paths.scss, css );\n    watch( paths.js, javascript );\n    watch( paths.imagenes, imagenes );\n    watch( paths.imagenes, versionWebp );\n}\n  \nexports.css = css;\nexports.watchArchivos = watchArchivos;\nexports.default = parallel(css, javascript,  imagenes, versionWebp,  watchArchivos ); \nexports.build = parallel(css, javascript,  imagenes, versionWebp); "]}